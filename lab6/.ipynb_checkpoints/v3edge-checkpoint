#!/usr/bin/env python
""" v3edge: 3x3x3  edge detector for 3D images

"""
from v4 import vx
import sys
import numpy as np

def v3low ( img ):
 """ low pass filter
 """
 im = img.i
 tmimage = vx.Vx( img ) 
 tm = tmimage.i
 for z in range(1, im.shape[0]):
     for y in range(1, im.shape[1]):
         for x in range(1, im.shape[2]):
             if tm[z,y,x] >= 128:
                 im[z,y,x] = 255
             else:
                 im[z,y,x] = tm[z,y,x] / 128 * 255
 

def v3edge ( img ) :
 """ compute 3x3x3 mean for vx.Vx struct
 """
 im = img.i
 tmimage = vx.Vx( img ) 
 tmimage.embedim((1,1,1,1,1,1))
 tm = tmimage.i
 for z in range(1, im.shape[0]):
    for y in range(1, im.shape[1]):
        for x in range(1, im.shape[2]):
            # Calculate partial derivative in x,y,z directions
            gz = abs(tm[z, y, x] - tm[z+1, y, x]) + abs(tm[z, y, x] - tm[z-1, y, x])
            gy = abs(tm[z, y, x] - tm[z, y+1, x]) + abs(tm[z, y, x] - tm[z, y-1, x])
            gx = abs(tm[z, y, x] - tm[z, y, x+1]) + abs(tm[z, y, x] - tm[z, y, x-1])

            im[z, y, x] = gx + gy + gz

vargs = vx.vaparse( "if= of= -v  - ")
if '-' in vargs:
   print ("v3edge 3D edge detector")
   print ("if= input file")
   print ("of= output file")
   print ("[-v] verbose mode")
   sys.exit(0)

for arg in ['if', 'of']:
   if arg not in vargs:
       print ('v3edge error: required parameter %s is missing' % arg)
       sys.exit(1)
optv = '-v' in vargs

ximage = vx.Vx( vargs['if'] )   ;#read image
v3low(ximage);
v3edge(ximage)                 ;#process image
if optv:
   print (ximage.i)             ;# for very small images
ximage.write(vargs['of'])       ;# Write the result file
